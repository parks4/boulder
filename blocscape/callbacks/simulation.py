"""Callbacks for simulation functionality."""
from dash import Input, Output, State, callback_context, no_update
import dash
import plotly.graph_objects as go
import datetime
from typing import Dict, List, Optional, Tuple, Union

def register_simulation_callbacks(app):
    """Register callbacks for simulation functionality."""
    
    @app.callback(
        [
            Output("temperature-plot", "figure"),
            Output("pressure-plot", "figure"),
            Output("species-plot", "figure"),
            Output("last-sim-python-code", "data"),
        ],
        Input("run-simulation-btn", "n_clicks"),
        State("current-config", "data"),
        State("config-file-name", "data"),
        prevent_initial_call=True,
    )
    def run_simulation(n_clicks: int, config: dict, config_filename: str):
        """Run the simulation and update plots."""
        if n_clicks == 0:
            return {}, {}, {}, ""
        try:
            from ..solvers.cantera_converter import CanteraConverter
            from ..solvers.dual_cantera_converter import DualCanteraConverter
            
            if app.config.get("USE_DUAL_CONVERTER", True):
                converter = DualCanteraConverter()
                network, results, code_str = converter.build_network_and_code(config)
            else:
                converter = CanteraConverter()
                network, results = converter.build_network(config)
                code_str = ""

            # Create temperature plot
            temp_fig = go.Figure()
            temp_fig.add_trace(
                go.Scatter(x=results["time"], y=results["temperature"], name="Temperature")
            )
            temp_fig.update_layout(
                title="Temperature vs Time",
                xaxis_title="Time (s)",
                yaxis_title="Temperature (K)",
            )

            # Create pressure plot
            press_fig = go.Figure()
            press_fig.add_trace(
                go.Scatter(x=results["time"], y=results["pressure"], name="Pressure")
            )
            press_fig.update_layout(
                title="Pressure vs Time",
                xaxis_title="Time (s)",
                yaxis_title="Pressure (Pa)",
            )

            # Create species plot
            species_fig = go.Figure()
            for species, concentrations in results["species"].items():
                if max(concentrations) > 0.01:  # Only show species with significant concentration
                    species_fig.add_trace(
                        go.Scatter(x=results["time"], y=concentrations, name=species)
                    )
            species_fig.update_layout(
                title="Species Concentrations vs Time",
                xaxis_title="Time (s)",
                yaxis_title="Mole Fraction",
            )

            if app.config.get("USE_DUAL_CONVERTER", True) and code_str:
                now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                config_file_str = (
                    config_filename
                    if config_filename
                    else "(no file, edited or generated in app)"
                )
                header = (
                    f'"""\n'
                    f"This file was automatically generated by boulder on {now}.\n"
                    f"Configuration source: {config_file_str}\n"
                    f"\n"
                    f"This script defines all Cantera objects (reactors, connections), builds the reactor network, and runs a sample simulation loop.\n"
                    f"You can modify and run this script independently with Cantera installed.\n"
                    f'"""\n'
                )
                code_str = header + code_str

            return temp_fig, press_fig, species_fig, code_str
        except Exception:
            return {}, {}, {}, ""

    @app.callback(
        Output("download-python-code-btn-container", "children"),
        Input("last-sim-python-code", "data"),
        prevent_initial_call=False,
    )
    def show_download_button(code_str: str):
        """Show/hide the download Python code button."""
        if app.config.get("USE_DUAL_CONVERTER", True):
            return [
                dash.html.Button(
                    "Download .py",
                    id="download-python-code-btn",
                    color="secondary",
                    className="mb-2 w-100",
                    n_clicks=0,
                    disabled=not (code_str and code_str.strip()),
                ),
                dash.dcc.Download(id="download-python-code"),
            ]
        return []

    @app.callback(
        [
            Output("download-python-code-btn", "disabled"),
            Output("download-python-code-btn", "color"),
        ],
        [Input("last-sim-python-code", "data")],
        prevent_initial_call=False,
    )
    def toggle_download_button(code_str: str):
        """Enable/disable the download Python code button."""
        if not app.config.get("USE_DUAL_CONVERTER", True):
            return True, "secondary"
        if code_str and code_str.strip():
            return False, "primary"  # enabled, darker
        return True, "secondary"  # disabled, light/grey

    @app.callback(
        Output("last-sim-python-code", "data"),
        [
            Input({"type": "prop-edit", "prop": dash.ALL}, "value"),
            Input("save-config-json-edit-btn", "n_clicks"),
            Input("upload-config", "contents"),
        ],
        prevent_initial_call=True,
    )
    def clear_python_code_on_edit(*_):
        """Clear the Python code when configuration changes."""
        return "" 