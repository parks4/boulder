from dash import Input, Output, State, callback_context
import dash
import plotly.graph_objects as go
import datetime
from ..cantera_converter import CanteraConverter, DualCanteraConverter
from ..config import USE_DUAL_CONVERTER

def register_simulation_callbacks(app):
    @app.callback(
        Output("run-simulation", "children"),
        [Input("simulation-status", "data")],
    )
    def update_simulation_button_text(status):
        if status == "calculating":
            return "Calculating..."
        return "Run Simulation"

    @app.callback(
        [
            Output("temperature-plot", "figure"),
            Output("pressure-plot", "figure"),
            Output("species-plot", "figure"),
            Output("last-sim-python-code", "data"),
            Output("simulation-status", "data", allow_duplicate=True),
            Output("notification-toast", "is_open"),
            Output("notification-toast", "children"),
            Output("notification-toast", "header"),
        ],
        Input("run-simulation", "n_clicks"),
        State("current-config", "data"),
        State("config-file-name", "data"),
        prevent_initial_call=True,
    )
    def run_simulation(n_clicks, config, config_filename):
        if n_clicks == 0:
            return {}, {}, {}, "", "idle", False, "", ""
        try:
            # Set status to calculating
            dash.callback_context.outputs_list[4] = "calculating"
            
            if USE_DUAL_CONVERTER:
                converter = DualCanteraConverter()
                network, results, code_str = converter.build_network_and_code(config)
            else:
                converter = CanteraConverter()
                network, results = converter.build_network(config)
                code_str = ""

            # Create empty figures
            temp_fig = go.Figure()
            press_fig = go.Figure()
            species_fig = go.Figure()

            # Check if results is a dictionary and has the required keys
            if isinstance(results, dict) and "time" in results:
                # Add temperature trace if available
                if "temperature" in results:
                    temp_fig.add_trace(
                        go.Scatter(x=results["time"], y=results["temperature"], name="Temperature")
                    )
                temp_fig.update_layout(
                    title="Temperature vs Time",
                    xaxis_title="Time (s)",
                    yaxis_title="Temperature (K)",
                )

                # Add pressure trace if available
                if "pressure" in results:
                    press_fig.add_trace(
                        go.Scatter(x=results["time"], y=results["pressure"], name="Pressure")
                    )
                press_fig.update_layout(
                    title="Pressure vs Time",
                    xaxis_title="Time (s)",
                    yaxis_title="Pressure (Pa)",
                )

                # Add species traces if available
                if "species" in results and isinstance(results["species"], dict):
                    for species, concentrations in results["species"].items():
                        if isinstance(concentrations, (list, tuple)) and max(concentrations) > 0.01:
                            species_fig.add_trace(
                                go.Scatter(x=results["time"], y=concentrations, name=species)
                            )
                species_fig.update_layout(
                    title="Species Concentrations vs Time",
                    xaxis_title="Time (s)",
                    yaxis_title="Mole Fraction",
                )

            # Add header to code string if available
            if USE_DUAL_CONVERTER and code_str:
                now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                config_file_str = (
                    config_filename if config_filename else "(no file, edited or generated in app)"
                )
                header = (
                    f'"""\n'
                    f"This file was automatically generated by Blocscape on {now}.\n"
                    f"Configuration source: {config_file_str}\n"
                    f"\n"
                    f"This script defines all Cantera objects (reactors, connections), builds the reactor network, and runs a sample simulation loop.\n"
                    f"You can modify and run this script independently with Cantera installed.\n"
                    f'"""\n'
                )
                code_str = header + code_str

            return temp_fig, press_fig, species_fig, code_str, "idle", True, "Simulation completed successfully!", "Success"
        except Exception as e:
            return {}, {}, {}, "", "error", True, str(e), "Error" 