"""Callbacks for simulation execution and results handling."""

import dash
from dash import Input, Output, State
import plotly.graph_objects as go
import datetime


def register_callbacks(app):
    """Register simulation-related callbacks."""
    
    # Callback to run simulation and update plots
    @app.callback(
        [
            Output("temperature-plot", "figure"),
            Output("pressure-plot", "figure"),
            Output("species-plot", "figure"),
            Output("last-sim-python-code", "data"),
        ],
        Input("run-simulation", "n_clicks"),
        State("current-config", "data"),
        State("config-file-name", "data"),
        prevent_initial_call=True,
    )
    def run_simulation(n_clicks: int, config: dict, config_filename: str):
        from ..config import USE_DUAL_CONVERTER
        from ..cantera_converter import CanteraConverter, DualCanteraConverter
        
        if n_clicks == 0:
            return {}, {}, {}, ""
        try:
            if USE_DUAL_CONVERTER:
                converter = DualCanteraConverter()
                network, results, code_str = converter.build_network_and_code(config)
            else:
                converter = CanteraConverter()
                network, results = converter.build_network(config)
                code_str = ""
            
            # Create temperature plot
            temp_fig = go.Figure()
            temp_fig.add_trace(
                go.Scatter(x=results["time"], y=results["temperature"], name="Temperature")
            )
            temp_fig.update_layout(
                title="Temperature vs Time",
                xaxis_title="Time (s)",
                yaxis_title="Temperature (K)",
            )
            
            # Create pressure plot
            press_fig = go.Figure()
            press_fig.add_trace(
                go.Scatter(x=results["time"], y=results["pressure"], name="Pressure")
            )
            press_fig.update_layout(
                title="Pressure vs Time",
                xaxis_title="Time (s)",
                yaxis_title="Pressure (Pa)",
            )
            
            # Create species plot
            species_fig = go.Figure()
            for species, concentrations in results["species"].items():
                if (
                    max(concentrations) > 0.01
                ):  # Only show species with significant concentration
                    species_fig.add_trace(
                        go.Scatter(x=results["time"], y=concentrations, name=species)
                    )
            species_fig.update_layout(
                title="Species Concentrations vs Time",
                xaxis_title="Time (s)",
                yaxis_title="Mole Fraction",
            )
            
            if USE_DUAL_CONVERTER and code_str:
                now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                config_file_str = (
                    config_filename
                    if config_filename
                    else "(no file, edited or generated in app)"
                )
                header = (
                    f'"""\n'
                    f"This file was automatically generated by Boulder on {now}.\n"
                    f"Configuration source: {config_file_str}\n"
                    f"\n"
                    f"This script defines all Cantera objects (reactors, connections), builds the reactor network, and runs a sample simulation loop.\n"
                    f"You can modify and run this script independently with Cantera installed.\n"
                    f'"""\n'
                )
                code_str = header + code_str
            return temp_fig, press_fig, species_fig, code_str
        except Exception:
            return {}, {}, {}, ""

    # Conditionally render Download .py button
    @app.callback(
        Output("download-python-code-btn-container", "children"),
        Input("last-sim-python-code", "data"),
        prevent_initial_call=False,
    )
    def show_download_button(code_str):
        from ..config import USE_DUAL_CONVERTER
        from dash import dcc
        import dash_bootstrap_components as dbc
        
        if USE_DUAL_CONVERTER:
            return [
                dbc.Button(
                    "Download .py",
                    id="download-python-code-btn",
                    color="secondary",
                    className="mb-2 w-100",
                    n_clicks=0,
                    disabled=not (code_str and code_str.strip()),
                ),
                dcc.Download(id="download-python-code"),
            ]
        return []

    # Only enable/disable Download .py button if DualCanteraConverter is used
    @app.callback(
        [
            Output("download-python-code-btn", "disabled"),
            Output("download-python-code-btn", "color"),
        ],
        [Input("last-sim-python-code", "data")],
        prevent_initial_call=False,
    )
    def toggle_download_button(code_str):
        from ..config import USE_DUAL_CONVERTER
        
        if not USE_DUAL_CONVERTER:
            return True, "secondary"
        if code_str and code_str.strip():
            return False, "primary"  # enabled, darker
        return True, "secondary"  # disabled, light/grey

    # Clear last-sim-python-code on parameter or config change
    @app.callback(
        Output("last-sim-python-code", "data", allow_duplicate=True),
        [
            Input({"type": "prop-edit", "prop": dash.ALL}, "value"),
            Input("save-config-json-edit-btn", "n_clicks"),
            Input("upload-config", "contents"),
        ],
        prevent_initial_call=True,
    )
    def clear_python_code_on_edit(*_):
        return ""

    # Download .py file when button is clicked
    @app.callback(
        Output("download-python-code", "data"),
        Input("download-python-code-btn", "n_clicks"),
        State("last-sim-python-code", "data"),
        prevent_initial_call=True,
    )
    def trigger_download_py(n_clicks, code_str):
        if n_clicks and code_str and code_str.strip():
            return dict(content=code_str, filename="cantera_simulation.py")
        return dash.no_update 